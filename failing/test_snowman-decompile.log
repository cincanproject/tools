============================= test session starts ==============================
platform linux -- Python 3.6.7, pytest-5.2.1, py-1.8.0, pluggy-0.13.0
rootdir: /root/tools
collected 1 item

snowman-decompile/test_snowman_decompile.py F                            [100%]

=================================== FAILURES ===================================
__________________________________ test_help ___________________________________

    def test_help():
>       tool = dockertools.tool_with_file(__file__)

snowman-decompile/test_snowman_decompile.py:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
metatool/dockertools.py:217: in tool_with_file
    return ToolImage(path=path, tag=tag)
metatool/dockertools.py:29: in __init__
    self.image, log = self.client.images.build(path=path, tag=tag, rm=rm)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <docker.models.images.ImageCollection object at 0x7f202dc4a668>
kwargs = {'path': 'snowman-decompile', 'rm': True, 'tag': 'test_snowman-decompile'}
resp = <generator object APIClient._stream_helper at 0x7f202dc5b360>
last_event = {'stream': "\x1b[91mE: Version '6.0-21+deb9u1' for 'unzip' was not found\n\x1b[0m"}
image_id = None, result_stream = <itertools._tee object at 0x7f202dbeb1c8>
internal_stream = <itertools._tee object at 0x7f202dbeb648>
chunk = {'error': 'The command \'/bin/sh -c apt-get update && apt-get install --no-install-recommends -y     unzip=6.0-21+deb9...ppuser     && chown -R appuser /tmp/snowman.ed3979dabdbc311f6c973f6a61c8c6b220b0e41b\' returned a non-zero code: 100'}}
match = None

    def build(self, **kwargs):
        """
        Build an image and return it. Similar to the ``docker build``
        command. Either ``path`` or ``fileobj`` must be set.
    
        If you have a tar file for the Docker build context (including a
        Dockerfile) already, pass a readable file-like object to ``fileobj``
        and also pass ``custom_context=True``. If the stream is compressed
        also, set ``encoding`` to the correct value (e.g ``gzip``).
    
        If you want to get the raw output of the build, use the
        :py:meth:`~docker.api.build.BuildApiMixin.build` method in the
        low-level API.
    
        Args:
            path (str): Path to the directory containing the Dockerfile
            fileobj: A file object to use as the Dockerfile. (Or a file-like
                object)
            tag (str): A tag to add to the final image
            quiet (bool): Whether to return the status
            nocache (bool): Don't use the cache when set to ``True``
            rm (bool): Remove intermediate containers. The ``docker build``
                command now defaults to ``--rm=true``, but we have kept the old
                default of `False` to preserve backward compatibility
            timeout (int): HTTP timeout
            custom_context (bool): Optional if using ``fileobj``
            encoding (str): The encoding for a stream. Set to ``gzip`` for
                compressing
            pull (bool): Downloads any updates to the FROM image in Dockerfiles
            forcerm (bool): Always remove intermediate containers, even after
                unsuccessful builds
            dockerfile (str): path within the build context to the Dockerfile
            buildargs (dict): A dictionary of build arguments
            container_limits (dict): A dictionary of limits applied to each
                container created by the build process. Valid keys:
    
                - memory (int): set memory limit for build
                - memswap (int): Total memory (memory + swap), -1 to disable
                    swap
                - cpushares (int): CPU shares (relative weight)
                - cpusetcpus (str): CPUs in which to allow execution, e.g.,
                    ``"0-3"``, ``"0,1"``
            shmsize (int): Size of `/dev/shm` in bytes. The size must be
                greater than 0. If omitted the system uses 64MB
            labels (dict): A dictionary of labels to set on the image
            cache_from (list): A list of images used for build cache
                resolution
            target (str): Name of the build-stage to build in a multi-stage
                Dockerfile
            network_mode (str): networking mode for the run commands during
                build
            squash (bool): Squash the resulting images layers into a
                single layer.
            extra_hosts (dict): Extra hosts to add to /etc/hosts in building
                containers, as a mapping of hostname to IP address.
            platform (str): Platform in the format ``os[/arch[/variant]]``.
            isolation (str): Isolation technology used during build.
                Default: `None`.
            use_config_proxy (bool): If ``True``, and if the docker client
                configuration file (``~/.docker/config.json`` by default)
                contains a proxy configuration, the corresponding environment
                variables will be set in the container being built.
    
        Returns:
            (tuple): The first item is the :py:class:`Image` object for the
                image that was build. The second item is a generator of the
                build logs as JSON-decoded objects.
    
        Raises:
            :py:class:`docker.errors.BuildError`
                If there is an error during the build.
            :py:class:`docker.errors.APIError`
                If the server returns any other error.
            ``TypeError``
                If neither ``path`` nor ``fileobj`` is specified.
        """
        resp = self.client.api.build(**kwargs)
        if isinstance(resp, six.string_types):
            return self.get(resp)
        last_event = None
        image_id = None
        result_stream, internal_stream = itertools.tee(json_stream(resp))
        for chunk in internal_stream:
            if 'error' in chunk:
>               raise BuildError(chunk['error'], result_stream)
E               docker.errors.BuildError: The command '/bin/sh -c apt-get update && apt-get install --no-install-recommends -y     unzip=6.0-21+deb9u1     wget=1.18-5+deb9u3     ca-certificates=20161130+nmu1+deb9u1     build-essential=12.3     cmake=3.7.2-1     libboost-dev=1.62.0.1     qt5-default=5.7.1+dfsg-3+deb9u1     ninja-build=1.7.2-1     && wget -q https://github.com/yegord/snowman/archive/master.zip     && unzip master.zip     && rm master.zip     && make -C /snowman-master     && apt-get clean     && apt-get --purge remove -y unzip wget ca-certificates build-essential cmake ninja-build     && apt-get --purge -y autoremove     && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives     && adduser --shell /sbin/nologin --disabled-login --gecos "" appuser     && chown -R appuser /tmp/snowman.ed3979dabdbc311f6c973f6a61c8c6b220b0e41b' returned a non-zero code: 100

venv/lib/python3.6/site-packages/docker/models/images.py:287: BuildError
============================== 1 failed in 6.56s ===============================
